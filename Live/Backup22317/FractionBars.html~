<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>Fraction Bars Virtual Manipulative</title>

	<script src="../lib/easeljs-NEXT.combined.js"></script>
	<script type="text/javascript" src="../lib/tweenjs-NEXT.combined.js"></script>

<script id="editable">
	var canvas, stage, container;
	var barWidth = 150;
	var barHeight = 30;
	var rods = [];
	var rodCount = 0;
	var currentRow = 2;
	var currentCol = 2;
	var moving = false;
    var currentAlpha = .8;
    var snap = true;
    
	function init() {
		qn = getParameterByName("qn");
		initValue = getParameterByName("inVal");
		if (initValue != null) {
			in100 = Math.floor(initValue/100);
			in10 = Math.floor(initValue%100/10);
			in1 = initValue%10;
//			alert(in100 + "," + in10 + "," + in1);
		}
		// create stage and point it to the canvas:
		canvas = document.getElementById("testCanvas");
		stage = new createjs.Stage(canvas);

		// enable touch interactions if supported on the current device:
		createjs.Touch.enable(stage);

		// enabled mouse over / out events
		stage.enableMouseOver(10);
		stage.mouseMoveOutside = true; // keep tracking the mouse even when it leaves the canvas

	    container = new createjs.Container();
		stage.addChild(container);

 
		createStage();
		
        stage.addChild(drawFractionBar(160,120,2,"#00AA00"));
        stage.addChild(drawFractionBar(320,40,3,"YELLOW"));
        stage.addChild(drawFractionBar(320,80,4,"BLUE"));
        stage.addChild(drawFractionBar(320,120,5,"#BA55D3"));
        stage.addChild(drawFractionBar(480,40,6,"RED"));
        stage.addChild(drawFractionBar(480,80,10,"#D3D3D3"));
        stage.addChild(drawFractionBar(480,120,12,"ORANGE"));



		createjs.Ticker.setFPS(20);
		createjs.Ticker.addEventListener("tick", stage);
	}
	

	function stop() {
		createjs.Ticker.removeEventListener("tick", tick);
	}
	
	function drawBar(x,y,uWidth,color,set,index) {
        var bg = new createjs.Shape();
        bg.index = index;
        bg.set = set;
        bg.xloc = x;
        bg.yloc = y;
        bg.uWidth = uWidth;
		bg.graphics.ss(1).s("black").beginFill(color);
		bg.graphics.dr(x, y, uWidth, barHeight);
		bg.graphics.endFill();
	    bg.on("click", function (evt) {
	    		console.log(bg.oldX + ":" + bg.parent.x + "," + bg.oldY + ":" + bg.parent.y);
	    	if (Math.abs(bg.oldX - bg.parent.x) >= 3 || Math.abs(bg.oldY - bg.parent.y) >=  3)
				return;
    		shadeFractionBar(bg.parent,bg.index,bg.set);
		});
		bg.on("mousedown", function (evt) {
			bg.oldX = bg.parent.x;
			bg.oldY = bg.parent.y;
			this.parent.addChild(this);
			this.offset = {x: this.x - evt.stageX, y: this.y - evt.stageY};
		});
		return bg;
	}
    function shadeFractionBar(dragger,index,set) {
    	for (var i = 0; i < dragger.den; i++) {
    		var bg = dragger.bars[i];
    		bg.graphics.clear();
    		bg.graphics.s("black").beginFill("WHITE");
	    	bg.graphics.dr(bg.xloc, bg.yloc, bg.uWidth, barHeight);
	    	bg.set = 0;
	    	bg.graphics.endFill();
	    	bg.alpha = currentAlpha;
	    }
	    if (set == 1)
	    	index--;
	    for (var i = 0; i <= index; i++) {
    		var bg = dragger.bars[i];
    		bg.graphics.s("black").beginFill(dragger.color);
	    	bg.graphics.dr(bg.xloc, bg.yloc, bg.uWidth, barHeight);
	    	bg.graphics.endFill();
	    	bg.set = 1;
	    	bg.alpha = currentAlpha;
	    }
    	
    }
    function drawFractionBar(xloc,yloc,den,color) {
    	
    	var uWidth = barWidth/den;
 		var dragger = new createjs.Container();
		dragger.saved = false;
		dragger.index = -1;
		dragger.den = den;
		dragger.x = xloc;
		dragger.y = yloc;
		dragger.color = color;
		dragger.regX = barWidth/2;
		dragger.regY = barHeight/2; 
		dragger.bars = [];
		var barGrid = new createjs.Shape();
   		barGrid.graphics.ss(2).s("black");
		for (var i = 0; i < dragger.den; i++) {
	    	barGrid.graphics.dr(i*uWidth, 0, uWidth, barHeight);
    	}
    	dragger.addChild(barGrid);
   		var bar = drawBar(0,0,uWidth,color,1,0);
   		bar.alpha = currentAlpha;
		dragger.addChild(bar);
		dragger.bars.push(bar);
		for (var i = 1; i < den; i++) {
			bar = drawBar(i*uWidth,0,uWidth,"WHITE",0,i);
			bar.alpha = currentAlpha;
			dragger.bars.push(bar);
			dragger.addChild(bar);
		}
		dragger.scaleX = dragger.scaleY = dragger.scale = 1;
		
		dragger.on("rollover", function (evt) {
				this.scaleX = this.scaleY = this.scale * 1.01;
				update = true;
		});
		dragger.on("rollout", function (evt) {
				rotateLeft = rotateRight = false;
				this.scaleX = this.scaleY = this.scale;
				update = true;
		});	
		dragger.on("mousedown", function (evt) {
			dragger.oldX = dragger.x;
			dragger.oldY = dragger.y;
			this.parent.addChild(this);
			this.offset = {x: this.x - evt.stageX, y: this.y - evt.stageY};
		});
		dragger.on("pressmove", function (evt) {
			this.x = evt.stageX + this.offset.x;
			this.y = evt.stageY + this.offset.y;
			// indicate that the stage should be updated on the next tick:
			update = true;
		});   	

		dragger.on("pressup", function (evt) {
			if (Math.abs(dragger.oldX - dragger.x) < 3 && Math.abs(dragger.oldY - dragger.y) < 3)
				return;
			if (dragger.x < 85 || dragger.x > 510 || dragger.y < 180 || dragger.y > 345) {
				if (dragger.index != -1) {
					rods.splice(dragger.index,1);
					deleteRod(dragger);
				}
				else {
					createjs.Tween.get(dragger, {loop: false}, null, false) // get a new tween targeting circle
					.to({x: xloc, y: yloc}, 1000, createjs.Ease.get(1)) // tween x/y/alpha properties over 1s (1000ms) with ease out
				}
			} else if (dragger.index != -1) {
				var x = dragger.x - 250;
				var y = dragger.y - 10;
				if (snap) {
					dragger.x = Math.round(x/15)*15+250;
					dragger.y = Math.round(y/15)*15+7;
				}
			} else {
				var x = dragger.x - 250;
				var y = dragger.y - 10;
				if (snap) {
					dragger.x = Math.round(x/15)*15+250;
					dragger.y = Math.round(y/15)*15+7;
				}
				dragger.index = rodCount;
				rodCount++;
				rods.push(dragger);
				stage.addChild(drawFractionBar(xloc,yloc,den,color));
			}
			update = true;
		});
		update = true;
		return dragger;
	}



	function createStage() {
		var resetImage = new Image();
		var trashCanImage = new Image();
		trashCanImage.src = "../images/TrashCan.JPG";
		trashCanImage.onload=handleTrashCanLoad;
		resetImage.src = "../images/resetButton.png";
		resetImage.onload = handleResetButtonLoad;
		var graphics = new createjs.Graphics();
		graphics.setStrokeStyle(1).beginStroke("#D3D3D3").drawRect(5, 5, 580, 350);
		graphics.setStrokeStyle(1).beginStroke("#D3D3D3").drawRect(10, 10, 570, 155);
		graphics.setStrokeStyle(1).beginStroke("#D3D3D3").beginFill("#FFF8DC").drawRect(10, 170, 570, 180);
        graphics.alpha=0.25;
        for (var i = 0; i < 11; i++)
        	graphics.mt(10,185+i*15).lt(580,185+i*15);
        for (var i = 0; i < 37; i++)
        	graphics.mt(25+i*15,170).lt(25+i*15,350);
        
		var shape = new createjs.Shape(graphics);
        container.addChild(shape);
	}
	
	function handleResetButtonLoad(event) {

		var image = event.target;
		var bitmap = new createjs.Bitmap(image);
		container.addChild(bitmap);
		var text = new createjs.Text("Start Over", "12px Arial", "#000000");
        text.x = 20;
        text.y = 160;
        text.textBaseline = "alphabetic";
        container.addChild(text);
		bitmap.regX = bitmap.image.width / 2 | 0;
		bitmap.regY = bitmap.image.height / 2 | 0;
		bitmap.scaleX = bitmap.scaleY = bitmap.scale = 1;
		bitmap.name = "bmp_resetButton";
		bitmap.cursor = "pointer";
		this.scaleX = this.scaleY = this.scale;
		bitmap.x = 50;
		bitmap.y = 120
		bitmap.on("click",function (evt) {
			for (var i = 0; i < rodCount;i++) {
				deleteRod(rods.pop());
			}
			rodCount = 0;
			currentRow = 2;
			currentCol = 2;
		 });
		bitmap.on("rollover", function (evt) {
			this.scaleX = this.scaleY = this.scale * 1.2;
			update = true;
		});

		bitmap.on("rollout", function (evt) {
			this.scaleX = this.scaleY = this.scale;
			update = true;
		});
	}

	function handleTrashCanLoad(event) {
		var image = event.target;
		var bitmap = new createjs.Bitmap(image);
		container.addChild(bitmap);
		bitmap.regX = bitmap.image.width / 2 | 0;
		bitmap.regY = bitmap.image.height / 2 | 0;
		bitmap.scaleX = bitmap.scaleY = bitmap.scale = 1;
		bitmap.name = "bmp_resetButton";
		bitmap.cursor = "pointer";
		this.scaleX = this.scaleY = this.scale;

		bitmap.x = 50;
		bitmap.y = 50;
		this.scaleX = this.scaleY = this.scale;
		bitmap.on("rollover", function (evt) {
			this.scaleX = this.scaleY = this.scale * 1.2;
			update = true;
		});

		bitmap.on("rollout", function (evt) {
			this.scaleX = this.scaleY = this.scale;
			update = true;
		});

	}
	function tick(event) {
		// this set makes it so the stage only re-renders when an event handler indicates a change has happened.
		if (update) {
			update = false; // only update once
			stage.update(event);
		}
	}
	function deleteRod(dragger) {
		createjs.Tween.get(dragger)
		.to({alpha:0, visible:false}, 500);
	}	
function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}
function getOut() {
	var outtxt = num100*100+num10*10+num1; 
	if (qn != null) {
		parent.postMessage(qn+"::"+outtxt,'*');
//		alert(qn+"::"+outtxt);
	}	
}
function setLayer(){
	var check = "&#10004;";
	if (currentAlpha == .5) {
		currentAlpha = 1;
		document.getElementById("layerOne").innerHTML = "&nbsp;";
	} else {
		currentAlpha = .5;
		document.getElementById("layerOne").innerHTML = "&#10004;";
	}
}
function setSnap(){
	var check = "&#10004;";
	if (snap == true) {
		snap = false;
		document.getElementById("snap").innerHTML = "&nbsp;";
	} else {
		snap = true;
		document.getElementById("snap").innerHTML = "&#10004;";
	}
}
</script>
</head>
<body onload="init();">
<div style="position:relative">
  <div style="position:absolute;top:0px;left:0px">
    <canvas id="testCanvas" width="600px" height="380px"></canvas>
  </div>
  <div id="controls" style="position:absolute;top:30px;left:100px">
    Add Transparent<br> Pieces <button type="button" id="layerOne" onclick="setLayer()">&nbsp;</button>
 </div>
  <div id="controls" style="position:absolute;top:70px;left:100px">
    Snap to grid <button type="button" id="snap" onclick="setSnap()">&#10004;</button>
 </div>
  </div>
</body>
</html>