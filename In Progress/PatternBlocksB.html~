<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>Pattern BlocksVirtual Manipulative</title>

	<script src="../lib/easeljs-NEXT.combined.js"></script>
	<script type="text/javascript" src="../lib/tweenjs-NEXT.combined.js"></script>

<script id="editable">
	// Class Variables
	var canvas, stage, container;
	var tiles = [];
	var tileCount = 0;
	var currentAlpha = 1;
	var nextTileId = 0;
	
	// Constants
	var TILE_WIDTH = 50;
	var TILE_HEIGHT = 43.3;
	var X_ORIGIN = 135;
	var Y_ORIGIN = 10;
	var STAGE_WIDTH = 500;
	var STAGE_HEIGHT = 433;
	var H_TILE_COUNT = 10;
	var V_TILE_COUNT = 10;


    
	function init() {
		qn = getParameterByName("qn");
		initValue = getParameterByName("inVal");
		if (initValue != null) {
			// Load Stage with inVal Tiles
		}
		// create stage and point it to the canvas:
		canvas = document.getElementById("testCanvas");
		stage = new createjs.Stage(canvas);

		// enable touch interactions if supported on the current device:
		createjs.Touch.enable(stage);

		// enabled mouse over / out events
		stage.enableMouseOver(10);
		stage.mouseMoveOutside = true; // keep tracking the mouse even when it leaves the canvas

	    container = new createjs.Container();
		stage.addChild(container);
		createStage();
        createjs.Ticker.setFPS(20);
        createjs.Ticker.addEventListener("tick", stage);
//           resize();
	}
	

	function stop() {
		createjs.Ticker.removeEventListener("tick", tick);
	}
	
	function createStage() {
		var trashCanImage = new Image();
		trashCanImage.src = "../images/TrashCan.JPG";
		trashCanImage.onload=handleTrashCanLoad;
		var resetImage = new Image();
		resetImage.src = "../images/resetButton.png";
		resetImage.onload = handleResetButtonLoad;
		var s = new createjs.Shape();
		s.graphics.setStrokeStyle(1).beginStroke("#D3D3D3").drawRect(5, 5, 635, 490);
		s.graphics.setStrokeStyle(1).beginStroke("#D3D3D3").drawRect(10, 10, 120, 480);
		s.graphics.setStrokeStyle(1).beginStroke("#D3D3D3").beginFill("#FFF8DC");
		s.graphics.drawRect(X_ORIGIN, Y_ORIGIN, STAGE_WIDTH, STAGE_HEIGHT);
        s.graphics.alpha=0.25;
        for (var i = 0; i < 6; i++) {
        	var x = X_ORIGIN+i*TILE_WIDTH;
        	var y = Y_ORIGIN;
        	s.graphics.mt(x,y).lt(x+10*(TILE_WIDTH/2),y + STAGE_HEIGHT);
        	x = X_ORIGIN + STAGE_WIDTH - i*TILE_WIDTH;
        	s.graphics.mt(x,y).lt(x-10*(TILE_WIDTH/2),y + STAGE_HEIGHT);        	
        }
        for (var i = 0; i < 4; i++) {
        	var x = X_ORIGIN;
        	var y = Y_ORIGIN + (i+1)*TILE_HEIGHT*2;
        	console.log(x + ":" + y);
        	s.graphics.mt(x,y).lt(x+TILE_WIDTH*4-(TILE_WIDTH*i),Y_ORIGIN + STAGE_HEIGHT);
        	var x = X_ORIGIN + STAGE_WIDTH;
        	s.graphics.mt(x,y).lt(x-TILE_WIDTH*4+(TILE_WIDTH*i),Y_ORIGIN + STAGE_HEIGHT);
        }
        
        for (var i = 0; i < 4; i++) {
        	var x = X_ORIGIN+(i+6)*TILE_WIDTH;
        	var y = Y_ORIGIN;
        	s.graphics.mt(x,y);
        	s.graphics.lt(X_ORIGIN + STAGE_WIDTH,
        		       Y_ORIGIN + STAGE_HEIGHT - (TILE_HEIGHT*2) * (i+1));
        	var x = X_ORIGIN + (i+1)*TILE_WIDTH;
        	s.graphics.mt(x,y);
        	s.graphics.lt(X_ORIGIN,
        		       Y_ORIGIN + (TILE_HEIGHT*2) * (i+1));
        	
        }
        container.addChild(s);
        createTile(70,185,1);
        createTile(70,370,2);
        createTile(70,320,3);
        createTile(70,420,4);
        createTile(70,265,5);
        createTile(70,465,6);
       createTransparentHotSpot(300,475);
       createTransparentHotSpotText(150,485);
 
	}
	
	function Sliver(fill) {
		var bg = new createjs.Shape();
	    var hotSpotFill = "#000000";
	    bg.graphics.setStrokeStyle(1).beginStroke("#000000");
		bg.graphics.beginFill(fill);
		bg.graphics.mt(43.75,0);
		bg.graphics.lt(93.75,0).lt(50,24).lt(0,24).lt(43.3,0);
		bg.graphics.endFill();
		bg.twidth = 100;
		bg.theight = 24;
		return bg;
	}

	function Trapezoid(fill) {
		var bg = new createjs.Shape();
	    var hotSpotFill = "#000000";
	    bg.graphics.setStrokeStyle(1).beginStroke("#000000");
		bg.graphics.beginFill(fill);
		bg.graphics.mt(25,0);
		bg.graphics.lt(75,0).lt(100,43.3).lt(0,43.3).lt(25,0);
		bg.graphics.endFill();
		bg.twidth=100;
		bg.theight = 44;
		return bg;
	}
	
	function Square(fill) {
		var bg = new createjs.Shape();
	    var hotSpotFill = "#000000";
	    bg.graphics.setStrokeStyle(1).beginStroke("#000000");
		bg.graphics.beginFill(fill);
		bg.graphics.mt(0,0);
		bg.graphics.lt(50,0).lt(50,50).lt(0,50).lt(0,0);
		bg.graphics.endFill();
		bg.twidth=50;
		bg.theight = 50;
		return bg;
	}


	function Triangle(fill) {
		var bg = new createjs.Shape();
	    var hotSpotFill = "#000000";
	    bg.graphics.setStrokeStyle(1).beginStroke("#000000");
		bg.graphics.beginFill(fill);
		bg.graphics.mt(25,0);
		bg.graphics.lt(50,43.3).lt(0,43.3).lt(25,0);
		bg.graphics.endFill();
		bg.twidth = 50;
		bg.theight = 55;
		return bg;
	}
	function Diamond(fill) {
		var bg = new createjs.Shape();
	    var hotSpotFill = "#000000";
	    bg.graphics.setStrokeStyle(1).beginStroke("#000000");
		bg.graphics.beginFill(fill);
		bg.graphics.mt(25,0);
		bg.graphics.lt(75,0).lt(50,43.3).lt(0,43.3).lt(25,0);
		bg.graphics.endFill();
		bg.twidth=75;
		bg.theight = 44;
		return bg;
	}

	function Hexagon(fill) {
		var bg = new createjs.Shape();
	    var hotSpotFill = "#000000";
	    bg.graphics.setStrokeStyle(1).beginStroke("#000000");
		bg.graphics.beginFill(fill);
		bg.graphics.mt(25,0);
		bg.graphics.lt(75,0).lt(100,43.3).lt(75,86.6);
		bg.graphics.lt(25,86.6).lt(0,43.3).lt(25,0);
		bg.graphics.endFill();
		bg.twidth=100;
		bg.theight = 87;

		return bg;
	}

	
	function createTile(xLoc, yLoc,tileType) {
		var dragger = new createjs.Container();
		dragger.pointCount = 0;
        var rH = createRotationHandle();
        rH.x = 0;
        var points = [];
        dragger.points = points;
		var bg;
		switch (tileType) {
			case 1 : bg = Hexagon("#FFFF00"); 
				     rH.y = bg.theight/2;
		     		 points[0] = new createjs.Shape();
		     		 points[0].x = 25;
		     		 points[0].y = 0;
		     		 points[1] = new createjs.Shape();
		     		 points[1].x = 75;
		     		 points[1].y = 0;
		     		 points[2] = new createjs.Shape();
		     		 points[2].x = 100;
		     		 points[2].y = 43.3;
		     		 points[3] = new createjs.Shape();
		     		 points[3].x = 75;
		     		 points[3].y = 86.6;
		     		 points[4] = new createjs.Shape();
		     		 points[4].x = 25;
		     		 points[4].y = 86.6;
		     		 points[5] = new createjs.Shape();
		     		 points[5].x = 0;
		     		 points[5].y = 43.3;
		     		 dragger.pointCount = 6;
		     		break;
			case 2 : bg = Diamond("#0000FF"); 
				     rH.y = bg.theight;
		     		 points[0] = new createjs.Shape();
		     		 points[0].x = 25;
		     		 points[0].y = 0;
		     		 points[1] = new createjs.Shape();
		     		 points[1].x = 75;
		     		 points[1].y = 0;
		     		 points[2] = new createjs.Shape();
		     		 points[2].x = 50;
		     		 points[2].y = 43.3;
		     		 points[3] = new createjs.Shape();
		     		 points[3].x = 0;
		     		 points[3].y = 43.3;
		     		 dragger.pointCount = 4;
				     break;
			case 3 : bg = Triangle("#00FF00"); 
				     rH.y = bg.theight-10;
		     		 points[0] = new createjs.Shape();
		     		 points[0].x = 25;
		     		 points[0].y = 0;
		     		 points[1] = new createjs.Shape();
		     		 points[1].x = 50;
		     		 points[1].y = 43.3;
		     		 points[2] = new createjs.Shape();
		     		 points[2].x = 0;
		     		 points[2].y = 43.3;
		     		 dragger.pointCount = 3;
				     break;
			case 4 : bg = Trapezoid("#FF0000"); 
					 rH.y = bg.theight;
		     		 points[0] = new createjs.Shape();
		     		 points[0].x = 25;
		     		 points[0].y = 0;
		     		 points[1] = new createjs.Shape();
		     		 points[1].x = 75;
		     		 points[1].y = 0;
		     		 points[2] = new createjs.Shape();
		     		 points[2].x = 100;
		     		 points[2].y = 43.3;
		     		 points[3] = new createjs.Shape();
		     		 points[3].x = 0;
		     		 points[3].y = 43.3;
		     		 dragger.pointCount = 4;
					 break;
			case 5 : bg = Square("#FF8000"); 
				     rH.y = bg.theight;
		     		 points[0] = new createjs.Shape();
		     		 points[0].x = 0;
		     		 points[0].y = 0;
		     		 points[1] = new createjs.Shape();
		     		 points[1].x = 50;
		     		 points[1].y = 0;
		     		 points[2] = new createjs.Shape();
		     		 points[2].x = 50;
		     		 points[2].y = 50;
		     		 points[3] = new createjs.Shape();
		     		 points[3].x = 0;
		     		 points[3].y = 50;
		     		 dragger.pointCount = 4;
				     break;
			case 6 : bg = Sliver("#FFFFFF"); 
				     rH.y = bg.theight;
		     		 points[0] = new createjs.Shape();
		     		 points[0].x = 43.75;
		     		 points[0].y = 0;
		     		 points[1] = new createjs.Shape();
		     		 points[1].x = 93.75;
		     		 points[1].y = 0;
		     		 points[2] = new createjs.Shape();
		     		 points[2].x = 50;
		     		 points[2].y = 25;
		     		 points[3] = new createjs.Shape();
		     		 points[3].x = 0;
		     		 points[3].y = 25;
		     		 dragger.pointCount = 4;
				     break;
        }
        dragger.active = false;
		dragger.saved = false;
		dragger.x = xLoc;
		dragger.y = yLoc;
		dragger.regX = bg.twidth/2;
		dragger.regY = bg.theight/2; 

		dragger.index = -1;
		dragger.addChild(bg,rH);
		for (var i = 0; i < dragger.pointCount; i++) 
			dragger.addChild(points[i]);
		stage.addChild(dragger);
		dragger.scaleX = dragger.scaleY = dragger.scale = 1;
		dragger.on("rollover", function (evt) {
				this.scaleX = this.scaleY = this.scale * 1.02;
				update = true;
		});
		dragger.on("mousedown", function (evt) {
			dragger.oldX = dragger.x;
			dragger.oldY = dragger.y;
			this.parent.addChild(this);
			this.offset = {x: this.x - evt.stageX, y: this.y - evt.stageY};
		});
		dragger.on("rollout", function (evt) {
				rotateLeft = rotateRight = false;
				this.scaleX = this.scaleY = this.scale;
				update = true;
		});	
		dragger.on("pressmove", function (evt) {
			if (!rH.rotate) {
				this.x = evt.stageX + this.offset.x;
				this.y = evt.stageY + this.offset.y;
			} else {
				var rx = evt.stageX - dragger.oldX;
				var ry = evt.stageY - dragger.oldY;
				if (Math.abs(rx) < 1 && ry >= 0)
					var newAngle = -Math.PI/2;
				else if (Math.abs(rx) < 1 && ry < 0)
					var newAngle = Math.PI/2;
				else 
					var newAngle = Math.atan(ry/rx);
				if (rx > 0) {
					newAngle = -newAngle;
//						console.log("setting > 1 and 4 rotation with angle " + newAngle);
					var newRotation = (90+(90 - newAngle*180/Math.PI))%360;
				} else if (ry <0){
//						console.log("setting quadrant 2 rotation with angle " + newAngle);
					var newRotation = (newAngle*180/Math.PI)%360;
				} else {
					newAngle = -newAngle;
//						console.log("setting quadrant 3 rotation with angle " + newAngle);
					var newRotation = (270 + (90 - newAngle*180/Math.PI))%360;
				}
				switch (tileType) {
					case 1 :  newRotation = Math.round(newRotation * (10/300));
						evt.currentTarget.rotation = newRotation * 30;  break;
				 	case 2 : newRotation += 30;
				 		newRotation = Math.round(newRotation * (10/150));
				 		evt.currentTarget.rotation = newRotation * 15;  break;
				 	case 3 : newRotation += 35;
				 		newRotation = Math.round(newRotation * (10/300));
				 		evt.currentTarget.rotation = newRotation*30;  break;
				 	case 4 : newRotation += 20;
				 		newRotation = Math.round(newRotation * (10/300));
				 		evt.currentTarget.rotation = newRotation*30;  break;
				 	case 5 : newRotation += 40;
				 		newRotation = Math.round(newRotation * (10/300));
				 		evt.currentTarget.rotation = newRotation*30;  break;
				 	case 6 : newRotation += 10;
				 		newRotation = Math.round(newRotation * (10/300));
				 		evt.currentTarget.rotation = newRotation*30;  break;
				}
										
			}
			update = true;   
		});
		dragger.on("pressup", function (evt) {
			update = true;
			if (Math.abs(dragger.oldX - dragger.x) < 2 && Math.abs(dragger.oldY - dragger.y) < 2)
				return;
			if (!onStage(bg.twidth,bg.theight,dragger.x,dragger.y)) {
				if (dragger.active) {
					tileCount--;
					for (var i = 0; i < tiles.length; i++) {
						if (dragger.iD == tiles[i].iD) {
							tiles.splice(i,1);
							break;
						}
					}
					deleteTile(dragger);
				} else {
					createjs.Tween.get(dragger, {loop: false}, null, false) 
					.to({x: xLoc, y: yLoc}, 1000, createjs.Ease.get(1)) 
				}
			} else {
				if (dragger.active == false) {
					dragger.alpha = currentAlpha;
					dragger.iD = nextTileId;
					nextTileId++;
					dragger.active = true;
					tileCount++;
					tiles.push(dragger);
					createTile(xLoc,yLoc,tileType);
				}
				checkSnap(dragger);
			}
//			getOut();

		});
		dragger.on("click", function (evt) {
				if (dragger.x > X_ORIGIN  || dragger.active)
					return;
//				if (Math.abs(dragger.oldX - dragger.x) > 8 || Math.abs(dragger.oldY - dragger.y) > 8)
//						return;
				var xSpot = (X_ORIGIN + (STAGE_WIDTH - X_ORIGIN)/2) * ((70+(Math.random()*60))/100);
				var ySpot = (Y_ORIGIN + (STAGE_WIDTH - Y_ORIGIN)/2) * ((70+(Math.random()*60))/100);
				console.log(xSpot + ":" + ySpot);
				createjs.Tween.get(dragger, {loop: false}, null, false) // get a new tween targeting circle
					.to({x: xSpot, y: ySpot,alpha:currentAlpha}, 1000, createjs.Ease.get(1)) // tween x/y/alpha properties over 1s (1000ms) with ease out
				dragger.alpha = currentAlpha;
				dragger.iD = nextTileId;
				nextTileId++;
				dragger.active = true;
				tileCount++;
				tiles.push(dragger);
				createTile(xLoc,yLoc,tileType);				
		});
		return dragger;
	}
	
	function checkSnap(dragger) {
		for (var i = 0; i < tileCount; i++) {
			if (tiles[i].iD != dragger.iD) {
				if (distance(tiles[i],dragger) < 120) {
					console.log("Close enough to check");
					if (snapFound(tiles[i],dragger))
						return;
				}
			}
		}
	}
	
	function distance(tile1,tile2) {
		return Math.sqrt(Math.pow((tile2.x+tile2.regX)-(tile1.x + tile1.regX),2) +
			Math.pow((tile2.y+tile2.regY) - (tile1.y+tile1.regY),2));
	}
	
	function snapFound(tile,dragger) {
		for (var i = 0; i < tile.pointCount; i++) {
			var tPoint = tile.localToGlobal(tile.points[i].x, tile.points[i].y);
			for (var j = 0; j < dragger.pointCount; j++) {
				var dPoint = dragger.localToGlobal(dragger.points[j].x, dragger.points[j].y);
				var distance = Math.sqrt(Math.pow(tPoint.x - dPoint.x,2) +
					                     Math.pow(tPoint.y - dPoint.y,2));
				if (distance < 15) {
					dragger.x += tPoint.x - dPoint.x;
					dragger.y += tPoint.y - dPoint.y;
					return true;
					console.log(i + ":" + j + ":" + distance);
				}
			}
		}		
		return false;
	}
	function onStage(width,height,xloc,yloc) {
		if (xloc > X_ORIGIN + width/2 - 10 && xloc < X_ORIGIN + STAGE_WIDTH - width/2 +10 &&
			yloc > Y_ORIGIN + height/2 - 10 && yloc < Y_ORIGIN + STAGE_HEIGHT - height/2 + 10)
			return true;
		else
			return false;
	}	
	
	function deleteTile(dragger) {
		createjs.Tween.get(dragger)
		.to({alpha:0, visible:false}, 500);
	}
	
	function createRotationHandle() {
		var hotSpot = new createjs.Shape();
		hotSpot.graphics.beginFill("#000000");
		hotSpot.graphics.drawCircle(0,0, 4).endFill();	
		hotSpot.regX = 1.5;
		hotSpot.regY = -1.5
		hotSpot.alpha = .2;
		hotSpot.cursor = "hand";
		hotSpot.rotate = false;
		hotSpot.scaleX = hotSpot.scaleY = hotSpot.scale = 1;		
		hotSpot.on("rollover", function (evt) {
			this.alpha = 1;
			hotSpot.scaleX = hotSpot.scaleY = hotSpot.scale = 1.02;		
			this.offset = {x: this.x - evt.stageX, y: this.y - evt.stageY};
			update = true;   
		});
		hotSpot.on("rollout", function (evt) {
			this.alpha = .2;
			hotSpot.scaleX = hotSpot.scaleY = hotSpot.scale = 1;
			update = true;
		});
		hotSpot.on("mousedown", function (evt) {
			hotSpot.rotate = true;
		});
		hotSpot.on("pressup", function (evt) {	
			this.alpha = .2;
			hotSpot.rotate = false;
		});
		return hotSpot;
	}
	


	function handleTrashCanLoad(event) {
		var image = event.target;
		var bitmap = new createjs.Bitmap(image);
		container.addChild(bitmap);
		bitmap.regX = bitmap.image.width / 2 | 0;
		bitmap.regY = bitmap.image.height / 2 | 0;
		bitmap.scaleX = bitmap.scaleY = bitmap.scale = 1;
		bitmap.name = "bmp_resetButton";
		bitmap.cursor = "pointer";
		this.scaleX = this.scaleY = this.scale;

		bitmap.x = 50;
		bitmap.y = 110;
		this.scaleX = this.scaleY = this.scale = 1;
		bitmap.on("rollover", function (evt) {
			this.scaleX = this.scaleY = this.scale * 1.2;
			update = true;
		});

		bitmap.on("rollout", function (evt) {
			this.scaleX = this.scaleY = this.scale;
			update = true;
		});
		bitmap.on("click", function (evt) {

		});
	}
	function handleResetButtonLoad(event) {
	
		var image = event.target;
		var bitmap = new createjs.Bitmap(image);
		container.addChild(bitmap);
		var text = new createjs.Text("Start Over", "12px Arial", "#000000");
        text.x = 20;
        text.y = 80;
        text.textBaseline = "alphabetic";
        container.addChild(text);
		bitmap.regX = bitmap.image.width / 2 | 0;
		bitmap.regY = bitmap.image.height / 2 | 0;
		bitmap.scaleX = bitmap.scaleY = bitmap.scale = 1;
		bitmap.name = "bmp_resetButton";
		bitmap.cursor = "pointer";
		this.scaleX = this.scaleY = this.scale = 1;
		bitmap.x = 50;
		bitmap.y = 40
		bitmap.on("click",function (evt) {
			resetStage();
		});
		bitmap.on("rollover", function (evt) {
			this.scaleX = this.scaleY = this.scale * 1.2;
			update = true;
		});

		bitmap.on("rollout", function (evt) {
			this.scaleX = this.scaleY = this.scale;
			update = true;
		});
	}
	function deleteTile(bitmap) {
		createjs.Tween.get(bitmap)
		.to({alpha:0, visible:false}, 500);
	}
	

	function tick(event) {
		// this set makes it so the stage only re-renders when an event handler indicates a change has happened.
		if (update) {
			update = false; // only update once
			stage.update(event);
		}
	}
	

	function resetStage() {
		while (tiles.length > 0) {
				deleteTile(tiles.pop());
			}
		tileCount = 0;
	}


	function createTransparentHotSpotText(xloc,yloc,label) {
		var hsText = new createjs.Text("Add Transparent Pieces", "12px Arial", "#000000");
        hsText.x = xloc;
        hsText.y = yloc;
        hsText.textBaseline = "alphabetic";
        stage.addChild(hsText);
    }
	
	function createTransparentHotSpot(xloc,yloc) {
		var hsContainer = new createjs.Container();
		hsContainer.visible = true;
		hsContainer.x = xloc;
		hsContainer.y = yloc;
		var hs = new createjs.Shape();
		hs.graphics.beginFill("#0000FF").setStrokeStyle(2);
		hs.graphics.drawCircle(5, 5, 10).endFill();	
		hs.regX = 1.5;
		hs.regY = -1.5;
		hs.selected = false;
		hs.alpha = .2;
		hs.scaleX = hs.scaleY = hs.scale = 1;
		hs.on("rollover", function (evt) {
			this.scaleX = this.scaleY = this.scale * 1.2;
			update = true;   
		});
		hs.on("rollout", function (evt) {
			this.scaleX = this.scaleY = this.scale;
			update = true;
		});
		hs.on("click", function (evt) {
			if (currentAlpha == .6) {
				currentAlpha = 1;
				this.alpha = .2;
			} else {
				currentAlpha = .6;
				this.alpha = 1;
			}	
			update = true;
		});		
		hsContainer.addChild(hs);
		stage.addChild(hsContainer);
	}

	function getParameterByName(name, url) {
		if (!url) url = window.location.href;
		name = name.replace(/[\[\]]/g, "\\$&");
		var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
			results = regex.exec(url);
		if (!results) return null;
		if (!results[2]) return '';
		return decodeURIComponent(results[2].replace(/\+/g, " "));
	}
	function getOut() {
		var outtxt = num100*100+num10*10+num1; 
		if (qn != null) {
			parent.postMessage(qn+"::"+outtxt,'*');
			//		alert(qn+"::"+outtxt);
		}	
	}
</script>
</head>
<body onload="init();">
<div style="position:relative">
  <div style="position:absolute;top:0px;left:0px">
    <canvas id="testCanvas" width="700px" height="700px"></canvas>
  </div>
</div>
</body>
</html>